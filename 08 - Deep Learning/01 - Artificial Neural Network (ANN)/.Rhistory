setwd("E:/Courses/AZCourse/08 - Deep Learning/01 - Artificial Neural Network (ANN)")
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("No", "Yes"),
labels = c(1,2)))
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1,2)))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(testing_set)
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
View(testing_set)
install.packages("h2o")
# Crear la red neuronal
#install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classfier = h2o.deeplearning(y = "Exited",
training_frame = training_set,
activation = "Rectifier",
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
classfier = h2o.deeplearning(y = "Exited",
training_frame = as.h20(training_set),
activation = "Rectifier",
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
classfier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
View(classfier)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Codificar los factores para la RNA
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1,2)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de variables
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
# Crear la red neuronal
#install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred>0.5, 1, 0)
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred>0.5, 1, 0)
View(y_pred)
View(y_pred)
y_pred = ifelse(prob_pred>0.5)
y_pred = (prob_pred>0.5)
y_pred = as.vector(y_pred)
y_pred
# Crear la matriz de confusion
cm = table(testing_set[,11], y_pred)
cm
(1554+190)/2000
# Cerrar la session h2o
h2o.shutdown()
